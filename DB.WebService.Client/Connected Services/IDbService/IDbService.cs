//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DB.WebService.Client.IDbService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TableColumn", Namespace="http://schemas.datacontract.org/2004/07/DB.WebService.Contract")]
    public partial class TableColumn : object
    {
        
        private string NameField;
        
        private DB.WebService.Client.IDbService.ColumnType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public DB.WebService.Client.IDbService.ColumnType Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ColumnType", Namespace="http://schemas.datacontract.org/2004/07/DB")]
    public enum ColumnType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Integer = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Real = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Char = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        String = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateTime = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateInterval = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RowCell", Namespace="http://schemas.datacontract.org/2004/07/DB.WebService.Contract")]
    public partial class RowCell : object
    {
        
        private string NameField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DB.WebService.Client.IDbService.IDbService")]
    public interface IDbService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbService/GetTables", ReplyAction="http://tempuri.org/IDbService/GetTablesResponse")]
        System.Threading.Tasks.Task<string[]> GetTablesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbService/CreateTable", ReplyAction="http://tempuri.org/IDbService/CreateTableResponse")]
        System.Threading.Tasks.Task CreateTableAsync(string tableName, DB.WebService.Client.IDbService.TableColumn[] dbColumn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbService/DeleteTable", ReplyAction="http://tempuri.org/IDbService/DeleteTableResponse")]
        System.Threading.Tasks.Task DeleteTableAsync(string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbService/AddRow", ReplyAction="http://tempuri.org/IDbService/AddRowResponse")]
        System.Threading.Tasks.Task AddRowAsync(string tableName, DB.WebService.Client.IDbService.RowCell[] row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbService/UpdateRow", ReplyAction="http://tempuri.org/IDbService/UpdateRowResponse")]
        System.Threading.Tasks.Task UpdateRowAsync(string tableName, int id, DB.WebService.Client.IDbService.RowCell[] row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbService/DeleteRow", ReplyAction="http://tempuri.org/IDbService/DeleteRowResponse")]
        System.Threading.Tasks.Task DeleteRowAsync(string tableName, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbService/GetRows", ReplyAction="http://tempuri.org/IDbService/GetRowsResponse")]
        System.Threading.Tasks.Task<string[]> GetRowsAsync(string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbService/GetColumns", ReplyAction="http://tempuri.org/IDbService/GetColumnsResponse")]
        System.Threading.Tasks.Task<DB.WebService.Client.IDbService.TableColumn[]> GetColumnsAsync(string tableName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IDbServiceChannel : DB.WebService.Client.IDbService.IDbService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class DbServiceClient : System.ServiceModel.ClientBase<DB.WebService.Client.IDbService.IDbService>, DB.WebService.Client.IDbService.IDbService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DbServiceClient() : 
                base(DbServiceClient.GetDefaultBinding(), DbServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDbService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DbServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DbServiceClient.GetBindingForEndpoint(endpointConfiguration), DbServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DbServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DbServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DbServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DbServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DbServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string[]> GetTablesAsync()
        {
            return base.Channel.GetTablesAsync();
        }
        
        public System.Threading.Tasks.Task CreateTableAsync(string tableName, DB.WebService.Client.IDbService.TableColumn[] dbColumn)
        {
            return base.Channel.CreateTableAsync(tableName, dbColumn);
        }
        
        public System.Threading.Tasks.Task DeleteTableAsync(string tableName)
        {
            return base.Channel.DeleteTableAsync(tableName);
        }
        
        public System.Threading.Tasks.Task AddRowAsync(string tableName, DB.WebService.Client.IDbService.RowCell[] row)
        {
            return base.Channel.AddRowAsync(tableName, row);
        }
        
        public System.Threading.Tasks.Task UpdateRowAsync(string tableName, int id, DB.WebService.Client.IDbService.RowCell[] row)
        {
            return base.Channel.UpdateRowAsync(tableName, id, row);
        }
        
        public System.Threading.Tasks.Task DeleteRowAsync(string tableName, int id)
        {
            return base.Channel.DeleteRowAsync(tableName, id);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRowsAsync(string tableName)
        {
            return base.Channel.GetRowsAsync(tableName);
        }
        
        public System.Threading.Tasks.Task<DB.WebService.Client.IDbService.TableColumn[]> GetColumnsAsync(string tableName)
        {
            return base.Channel.GetColumnsAsync(tableName);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDbService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDbService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:5237/db.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DbServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDbService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DbServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDbService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IDbService,
        }
    }
}
