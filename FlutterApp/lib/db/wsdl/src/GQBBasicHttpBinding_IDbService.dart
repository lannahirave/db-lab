
//------------------------------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 8.0.1.0
//
// Created by Quasar Development 
//
// This class has been generated for test purposes only and cannot be used in any commercial project.
// To use it in commercial project, you need to generate this class again with Premium account.
// Check https://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account.
//
// Licence: CA3F4CEB7486F6668BD6F181D6CA68F608603F641897C20DF217C55FE3F3416F64E665190F35F5CE91CF8F38D5FB78FB96170CE35D755393898FFBDA2F093BF2
//------------------------------------------------------------------------
part of com.example.testSoap.wcf;


class GQBBasicHttpBinding_IDbService
{

    String _url="http://localhost:5237/db.asmx";
    GQBConnectionProvider _connectionProvider=GQBHttpConnectionProvider();
    var httpHeaders= < String,String>{};
    bool enableLogging = false;
    String? userName;
    String? password;
    bool createClassesForAny=false;
    GQBBasicHttpBinding_IDbService();

    GQBBasicHttpBinding_IDbService.WithUrl(String url){
        this._url=url;
    }

    GQBBasicHttpBinding_IDbService.WithConnectionProvider(String url,GQBConnectionProvider connectionProvider){
        this._url=url;
        this._connectionProvider=connectionProvider;
    }

    GQBRequestResultHandler createRequestResultHandler()
    {
        var handler = GQBRequestResultHandler(GQBSoapVersion.v1_1);
        handler.createClassesForAny=createClassesForAny;
        return handler;
    }

    Future<void> sendRequest(String soapAction,XmlDocument soapBody,GQBRequestResultHandler handler) async
    {
        var __headers=< String,String>{};
        __headers.addAll(httpHeaders);
        __headers["SOAPAction"]=soapAction;
        __headers[HttpHeaders.userAgentHeader]="easyWSDL Generator 8.0.1.0";
        __headers[HttpHeaders.contentTypeHeader]="text/xml;charset=UTF-8";
        if (userName != null)
        {
            var authStr = "$userName:$password";
            var authData = ascii.encode(authStr);
            var data=base64.encode(authData);
            var authValue = "Basic $data";
            __headers[HttpHeaders.authorizationHeader]=authValue;
        }
        var __requestBody=soapBody.toString();
        if(enableLogging)
        {
            print(__requestBody);
        }
        var response=await _connectionProvider.sendRequest(Uri.parse(_url),__requestBody, __headers,handler);
        if(enableLogging)
        {
            print(response);
        }
        await handler.setResponse(response);
    }

    Future<XmlDocument> createGetTablesRequest(final GQBRequestResultHandler __handler) async
    {
        var xml=__handler.createEnvelopeXml();
        var __mainNode = __handler.writeElement("GetTables","http://tempuri.org/");
        __handler.Body!.children.add(__mainNode);
        __handler.finishEnvelopeXml(xml);
        return xml;
    }
    
    Future<GQBArrayOfstring> GetTables() async
    {
        var __handler =createRequestResultHandler();
        var __xml=await createGetTablesRequest(__handler);
        await sendRequest("http://tempuri.org/IDbService/GetTables",__xml,__handler);
        var __result=GQBHelper.getResult(__handler.OutputBody!, "GetTablesResult",false);
        return await __handler.createObject((__result as XmlElement),  () =>GQBArrayOfstring()) as GQBArrayOfstring;
    }
    Future<XmlDocument> createCreateTableRequest(final String? tableName,final GQBArrayOfTableColumn dbColumn,final GQBRequestResultHandler __handler) async
    {
        var xml=__handler.createEnvelopeXml();
        var __mainNode = __handler.writeElement("CreateTable","http://tempuri.org/");
        __handler.Body!.children.add(__mainNode);

        var __tableNameItemElement=__handler.writeElementWithType(tableName,String, "tableName", "http://tempuri.org/", __mainNode, false);
        if(__tableNameItemElement != null)
        {
            __tableNameItemElement.innerText = tableName.toString();
        }

        var __dbColumnItemElement=__handler.writeElementWithType(dbColumn,GQBArrayOfTableColumn, "dbColumn", "http://tempuri.org/", __mainNode, false);
        if(__dbColumnItemElement != null)
        {
            await dbColumn.serialize(__dbColumnItemElement,__handler);
        }
        __handler.finishEnvelopeXml(xml);
        return xml;
    }
    
    Future<void> CreateTable(final String? tableName,final GQBArrayOfTableColumn dbColumn) async
    {
        var __handler =createRequestResultHandler();
        var __xml=await createCreateTableRequest(tableName, dbColumn, __handler);
        await sendRequest("http://tempuri.org/IDbService/CreateTable",__xml,__handler);
    }
    Future<XmlDocument> createDeleteTableRequest(final String? tableName,final GQBRequestResultHandler __handler) async
    {
        var xml=__handler.createEnvelopeXml();
        var __mainNode = __handler.writeElement("DeleteTable","http://tempuri.org/");
        __handler.Body!.children.add(__mainNode);

        var __tableNameItemElement=__handler.writeElementWithType(tableName,String, "tableName", "http://tempuri.org/", __mainNode, false);
        if(__tableNameItemElement != null)
        {
            __tableNameItemElement.innerText = tableName.toString();
        }
        __handler.finishEnvelopeXml(xml);
        return xml;
    }
    
    Future<void> DeleteTable(final String? tableName) async
    {
        var __handler =createRequestResultHandler();
        var __xml=await createDeleteTableRequest(tableName, __handler);
        await sendRequest("http://tempuri.org/IDbService/DeleteTable",__xml,__handler);
    }
    Future<XmlDocument> createAddRowRequest(final String? tableName,final GQBArrayOfRowCell row,final GQBRequestResultHandler __handler) async
    {
        var xml=__handler.createEnvelopeXml();
        var __mainNode = __handler.writeElement("AddRow","http://tempuri.org/");
        __handler.Body!.children.add(__mainNode);

        var __tableNameItemElement=__handler.writeElementWithType(tableName,String, "tableName", "http://tempuri.org/", __mainNode, false);
        if(__tableNameItemElement != null)
        {
            __tableNameItemElement.innerText = tableName.toString();
        }

        var __rowItemElement=__handler.writeElementWithType(row,GQBArrayOfRowCell, "row", "http://tempuri.org/", __mainNode, false);
        if(__rowItemElement != null)
        {
            await row.serialize(__rowItemElement,__handler);
        }
        __handler.finishEnvelopeXml(xml);
        return xml;
    }
    
    Future<void> AddRow(final String? tableName,final GQBArrayOfRowCell row) async
    {
        var __handler =createRequestResultHandler();
        var __xml=await createAddRowRequest(tableName, row, __handler);
        await sendRequest("http://tempuri.org/IDbService/AddRow",__xml,__handler);
    }
    Future<XmlDocument> createUpdateRowRequest(final String? tableName,final int id,final GQBArrayOfRowCell row,final GQBRequestResultHandler __handler) async
    {
        var xml=__handler.createEnvelopeXml();
        var __mainNode = __handler.writeElement("UpdateRow","http://tempuri.org/");
        __handler.Body!.children.add(__mainNode);

        var __tableNameItemElement=__handler.writeElementWithType(tableName,String, "tableName", "http://tempuri.org/", __mainNode, false);
        if(__tableNameItemElement != null)
        {
            __tableNameItemElement.innerText = tableName.toString();
        }

        var __idItemElement=__handler.writeElementWithType(id,int, "id", "http://tempuri.org/", __mainNode, false);
        if(__idItemElement != null)
        {
            __idItemElement.innerText = id.toString();
        }

        var __rowItemElement=__handler.writeElementWithType(row,GQBArrayOfRowCell, "row", "http://tempuri.org/", __mainNode, false);
        if(__rowItemElement != null)
        {
            await row.serialize(__rowItemElement,__handler);
        }
        __handler.finishEnvelopeXml(xml);
        return xml;
    }
    
    Future<void> UpdateRow(final String? tableName,final int id,final GQBArrayOfRowCell row) async
    {
        var __handler =createRequestResultHandler();
        var __xml=await createUpdateRowRequest(tableName, id, row, __handler);
        await sendRequest("http://tempuri.org/IDbService/UpdateRow",__xml,__handler);
    }
    Future<XmlDocument> createDeleteRowRequest(final String? tableName,final int id,final GQBRequestResultHandler __handler) async
    {
        var xml=__handler.createEnvelopeXml();
        var __mainNode = __handler.writeElement("DeleteRow","http://tempuri.org/");
        __handler.Body!.children.add(__mainNode);

        var __tableNameItemElement=__handler.writeElementWithType(tableName,String, "tableName", "http://tempuri.org/", __mainNode, false);
        if(__tableNameItemElement != null)
        {
            __tableNameItemElement.innerText = tableName.toString();
        }

        var __idItemElement=__handler.writeElementWithType(id,int, "id", "http://tempuri.org/", __mainNode, false);
        if(__idItemElement != null)
        {
            __idItemElement.innerText = id.toString();
        }
        __handler.finishEnvelopeXml(xml);
        return xml;
    }
    
    Future<void> DeleteRow(final String? tableName,final int id) async
    {
        var __handler =createRequestResultHandler();
        var __xml=await createDeleteRowRequest(tableName, id, __handler);
        await sendRequest("http://tempuri.org/IDbService/DeleteRow",__xml,__handler);
    }
    Future<XmlDocument> createGetRowsRequest(final String? tableName,final GQBRequestResultHandler __handler) async
    {
        var xml=__handler.createEnvelopeXml();
        var __mainNode = __handler.writeElement("GetRows","http://tempuri.org/");
        __handler.Body!.children.add(__mainNode);

        var __tableNameItemElement=__handler.writeElementWithType(tableName,String, "tableName", "http://tempuri.org/", __mainNode, false);
        if(__tableNameItemElement != null)
        {
            __tableNameItemElement.innerText = tableName.toString();
        }
        __handler.finishEnvelopeXml(xml);
        return xml;
    }
    
    Future<GQBArrayOfstring> GetRows(final String? tableName) async
    {
        var __handler =createRequestResultHandler();
        var __xml=await createGetRowsRequest(tableName, __handler);
        await sendRequest("http://tempuri.org/IDbService/GetRows",__xml,__handler);
        var __result=GQBHelper.getResult(__handler.OutputBody!, "GetRowsResult",false);
        return await __handler.createObject((__result as XmlElement),  () =>GQBArrayOfstring()) as GQBArrayOfstring;
    }
    Future<XmlDocument> createGetColumnsRequest(final String? tableName,final GQBRequestResultHandler __handler) async
    {
        var xml=__handler.createEnvelopeXml();
        var __mainNode = __handler.writeElement("GetColumns","http://tempuri.org/");
        __handler.Body!.children.add(__mainNode);

        var __tableNameItemElement=__handler.writeElementWithType(tableName,String, "tableName", "http://tempuri.org/", __mainNode, false);
        if(__tableNameItemElement != null)
        {
            __tableNameItemElement.innerText = tableName.toString();
        }
        __handler.finishEnvelopeXml(xml);
        return xml;
    }
    
    Future<GQBArrayOfTableColumn> GetColumns(final String? tableName) async
    {
        var __handler =createRequestResultHandler();
        var __xml=await createGetColumnsRequest(tableName, __handler);
        await sendRequest("http://tempuri.org/IDbService/GetColumns",__xml,__handler);
        var __result=GQBHelper.getResult(__handler.OutputBody!, "GetColumnsResult",false);
        return await __handler.createObject((__result as XmlElement),  () =>GQBArrayOfTableColumn()) as GQBArrayOfTableColumn;
    }
}
